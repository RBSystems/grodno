/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "CoCon"
// #HINT ""
#DEFINE_CONSTANT	MICQ	25
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT TV_init, mic_00_lock, mic_setup, mic_vol_up, mic_vol_down, mic[MICQ,MICQ];
// ANALOG_INPUT
STRING_INPUT TV_RX[2000];
// BUFFER_INPUT 

DIGITAL_OUTPUT MicChanged, mic_setup_open, CoConConnect, mic_fb[MICQ,MICQ];
STRING_OUTPUT TV_TX, CoconTX;
ANALOG_OUTPUT LastSeat, mic_volume;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT CoconClient[10];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER TV_IP[15], seat[MICQ][2];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER mic_curr_vol;
// LONG_INTEGER
SIGNED_INTEGER mic_vol[MICQ];
// SIGNED_LONG_INTEGER
STRING ConnectionID[36], Trailer[100];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function Notify()
{
	if (Len(ConnectionID)<>0)
	{
		TV_TX = "GET /CoCon/Notification/id=" + ConnectionID + Trailer;
	}
}
 
Function MicOn(STRING SeatNr)
{
	if (Len(ConnectionID)<>0)
	{
		CoConConnect = 1;
		Delay(3);
		CoconTX = "GET /CoCon/Microphone/SetState/?State=On&SeatNr=" + SeatNr + Trailer;
		CoConConnect = 0;
	}
}

Function MicOff(STRING SeatNr)
{
	if (Len(ConnectionID)<>0)
	{
		CoConConnect = 1;
		Delay(3);
		CoconTX = "GET /CoCon/Microphone/SetState/?State=Off&SeatNr=" + SeatNr + Trailer;
		CoConConnect = 0;
	}
}


Function VolChange(SIGNED_INTEGER vol)
{
	STRING v[3];
	if (Len(ConnectionID)<>0)
	{
		CoConConnect = 1;
		if (vol < 0) v = "-" + ItoA(Abs(vol));
		else v = ItoA(vol);
		Delay(3);
		CoconTX = "GET CoCon/Microphone/SetMicrophoneSensitivity/?SeatId=" + seat[mic_curr_vol] + "&Sensitivity=" + v + Trailer;
		CoConConnect = 0;
	}
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH TV_init
{
	Trailer = " HTTP/1.1\r\nHost: " + TV_IP + "\r\nContent-Length: 0\r\n\r\n";
	TV_TX = "GET /CoCon/Connect" + Trailer;
}

PUSH mic
{
	INTEGER i;
	i = GetLastModifiedArrayIndex();
	if (mic_setup)
	{
		mic_curr_vol = i;
		mic_volume = mic_vol[i-1];
		mic_setup_open = 1;
	}
	else
	if (mic_fb[i]) MicOff(seat[i]); else MicOn(seat[i]);
}

PUSH mic_vol_up
{
	SIGNED_INTEGER i;
	i = mic_vol[mic_curr_vol-1];
	i = i + 1;
	if (i <= 12) 
	{
		VolChange(i);
		mic_vol[mic_curr_vol-1] = i;
		mic_volume = i;
	}
}

PUSH mic_vol_down
{
	SIGNED_INTEGER i;
	i = mic_vol[mic_curr_vol-1];
	i = i - 1;
	if (i >= -12) 
	{
		VolChange(i);
		mic_vol[mic_curr_vol-1] = i;
		mic_volume = i;
	}
}

RELEASE mic_setup
{
	mic_curr_vol = 0;
	mic_setup_open = 0;
	mic_volume = 0;
}

CHANGE TV_RX
{
	STRING SeatNr[2], Parse[100];
	INTEGER i, Pos, changer, mic_tmp[MICQ];
    if(mic_00_lock = 0)
	{
		if (Find("Connect", TV_RX))
		{
			ConnectionID = Mid(TV_RX, Find("id", TV_RX)+7, 36);
			TV_TX = "GET /CoCon/Microphone/GetState" + Trailer;
		}

		else if ((Find("GetState",TV_RX))||(Find("MicrophoneState",TV_RX)))
		{
			changer = 1;
			SetArray(mic_tmp, 0);
			Pos = Find("Speakers", TV_RX)+12;
			Parse = Mid(TV_RX, Pos, Find("]", TV_RX)-Pos);
			Pos = Len(Parse);
			While (Pos)
			{
				SeatNr = "";
				if (Mid(Parse, Pos, 1)=",") Pos=Pos - 1;
				SeatNr = Mid(Parse, Pos, 1);
				Pos = Pos - 1;
				if ((Pos)&&(Mid(Parse, Pos, 1)<>","))
				{
					SeatNr = Mid(Parse, Pos, 1) + SeatNr;
					Pos = Pos - 1;
				}
				if (changer) {LastSeat = AtoI(SeatNr); changer = 0; Pulse(1, MicChanged);}
				for(i=0 to MICQ-1) if (SeatNr=Seat[i+1]) mic_tmp[i] = 1;
			}
			if(changer) {LastSeat = 0; Pulse(1, MicChanged);}
			for(i=0 to MICQ-1) if(mic_tmp[i]<>mic_fb[i+1]) mic_fb[i+1] = mic_tmp[i];
		}
	}
    else 
	{
		LastSeat = 1;
	}
	Notify();
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	SetArray(mic_vol, 0);
}
